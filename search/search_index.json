{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Suhas's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container for Go","text":"<ul> <li>Primary author: Suhas Puttoju</li> <li>Reviewer: Ishita Siddamreddy</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure that you have the following before you start working:</p> <ol> <li>A GitHub Account  </li> <li><code>git</code> for version control  </li> <li>Docker downloaded on your device (to run containers)  </li> <li>Visual Studio Code  </li> </ol>"},{"location":"tutorials/go-setup/#part-1-project-repository-setup","title":"Part 1: Project Repository Setup","text":""},{"location":"tutorials/go-setup/#step-1-creating-local-directory-and-initializing-git","title":"Step 1: Creating Local Directory and Initializing Git","text":"<ol> <li>Open your terminal/command prompt and create a new directory for your project  <pre><code>mkdir go-tutorial\ncd go-tutorial\n</code></pre></li> <li>Initialize a new Git Repository:  <pre><code>git init\n</code></pre></li> <li>We then create a README file <pre><code>echo \"# Go Programming Language tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-2-creating-a-remote-repository-on-github","title":"Step 2: Creating a remote repository on GitHub","text":"<ol> <li>Log into GitHub and go to the 'Create New Repository' page.</li> <li>Here is what you should fill in for the details of the repo<ul> <li>Repository Name: <code>go-tutorial</code></li> <li>Description: \"Simple Go tutorial that outputs Hello COMP423!\"</li> <li>Visibility: Public</li> <li>Do NOT initialize the repo with a README</li> </ul> </li> </ol>"},{"location":"tutorials/go-setup/#step-3-linking-the-local-repository-to-github","title":"Step 3: Linking the Local Repository to GitHub","text":"<ol> <li> <p>Add the GitHub repository as a remote  <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-tutorial.git\n</code></pre> When doing this, replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> </li> <li> <p>Check what your repository's default branch is using <code>git branch</code>. The default branch should be <code>main</code>.</p> <ul> <li>If its not, run the following command to rename it to main: <code>git branch -M main</code>.</li> </ul> </li> </ol> <p>Note</p> <p>Check your default branch name with the subcommand git branch. The default branch is usually main, but older versions of git had the default branch named master.</p> <ol> <li>Push your local commits to the GitHub repository <pre><code>git push --set-upstream origin main\n</code></pre> All your changes should be pushed on GitHub now and you should be able to see it </li> </ol>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-development-environment","title":"Part 2. Setting Up the Development Environment","text":"<p>Development Containers are important because it standardizes the envrionment for software development and makes sure your work is replicable across different machines. </p>"},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<ol> <li>Open the <code>go-tutorial</code> directory on VS Code. <ul> <li>File-&gt;Open Folder-&gt;go-tutorial</li> </ul> </li> <li>In VSCode, click extensions and install the extension called Dev Containers</li> <li>Create a <code>.devcontainer</code> directory at the root of your project and add <code>devcontainer.json</code> inside that directory The configuration should be <code>.devcontainer/devcontainer.json</code></li> </ol> <p>Info</p> <p>The devcontainer.json file defines the configuration of our development environment.</p> <ol> <li>In the file you just created, add the following code <pre><code>{\n  \"name\": \"COMP423 Go Notes\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"golang.go\"]\n    }\n  }\n}\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2: Reopen the Project in a VSCode Dev Container","text":"<p>Type <code>Ctrl + Shift + P</code> or <code>Cmd + Shift + P</code> on Mac, then type \"Dev Containers: Reopen in Container\" and select the option</p> <p>Give it a couple of minutes but once the setup completes, close the current terminal tab. Open a new one and run <code>go version</code> to check what version of Go your container is running. </p>"},{"location":"tutorials/go-setup/#part-3-running-a-go-program","title":"Part 3. Running A Go Program","text":""},{"location":"tutorials/go-setup/#step-1-create-the-go-project","title":"Step 1. Create the Go Project","text":"<p>Now that your Dev Container is set up, lets create a new Go Project</p> <p>Initialize the Go Module by running:  <pre><code>go mod init github.com/&lt;your-username&gt;/go-tutorial\n</code></pre></p> <p>Note</p> <p>This will intialize a <code>go.mod</code> file in the current directory which defines the module's properties and dependencies</p> <p>Now we need to write our \"Hello COMP423\" program. Start by creating a file named <code>main.go</code> at the root of your project. Here is the documentation for working with Go but I will provide you with the code for now below:</p> <p><pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423!\")\n}\n</code></pre> Now that our program is written, we can run it!</p> <p>Info</p> <ul> <li>package main: Defines the main package. Where execution begins.</li> <li>import \"fmt\": Imports the fmt (format) package for formatted I/O.</li> <li>func main() {...}: Entry point for our Go program.</li> </ul>"},{"location":"tutorials/go-setup/#part-2-running-the-maingo-file","title":"Part 2 - Running the main.go file","text":"<p>To run the Go program, use the <code>go run</code> subcommand: <pre><code>go run main.go\n</code></pre></p> <p>The output should be  <pre><code>Hello COMP423!\n</code></pre></p> <p>Note</p> <p>You could also create an executable file by doing <code>go build main.go</code></p> <p>This generates an executable <code>main</code> which you can run with the following: <pre><code>./main\n</code></pre></p> <p>The output should once again be: <pre><code>Hello COMP423!\n</code></pre></p> <p>Info</p> <p>The difference with using the <code>build</code> subcommand is that it creates an executable binary file  that you can run multiple times later, similar to <code>gcc</code> from COMP211. Just using <code>run</code> though compiles and immediately runs the code. </p>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>You are now complete with the tutorial for setting up a DevContainer for Go and then writing a simple Go program. Congratulations!</p> <p>Tutorial Inspiration came from https://comp423-25s.github.io/resources/MkDocs/tutorial/</p>"}]}